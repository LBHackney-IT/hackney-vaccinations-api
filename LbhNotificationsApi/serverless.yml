service: lbh-notifications-api
provider:
  name: aws
  runtime: dotnetcore3.1
  memorySize: 2048
  timeout: 20
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  # TODO: Enable this line if DynamoDb is in use
  account: ${opt:account}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

package:
# TODO: Rename zipfile in build.sh and build.cmd to match this
  artifact: ./bin/release/netcoreapp3.1/lbh-notifications-api.zip

functions:
  LbhNotificationsApi:
    name: ${self:service}-${self:provider.stage}
    handler: LbhNotificationsApi::LbhNotificationsApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
      GOV_NOTIFY_EMAIL_TEMPLATE: ${ssm:/hackney/covid-vaccinations/${self:provider.stage}/email-template}
      GOV_NOTIFY_TEXT_TEMPLATE: ${ssm:/hackney/covid-vaccinations/${self:provider.stage}/text-message-template}
      GOV_NOTIFY_API_KEY: ${ssm:/hackney/covid-vaccinations/${self:provider.stage}/gov-notify-key}
      TEST_EMAIL_ADDRESS: ${ssm:/hackney/covid-vaccinations/${self:provider.stage}/test-email-address}
      TEST_MOBILE_NUMBER: ${ssm:/hackney/covid-vaccinations/${self:provider.stage}/test-mobile-number}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          #authorizer:
          #  arn: ${ssm:/api-authenticator/${self:provider.stage}/arn}
          #  type: request
          #  resultTtlInSeconds: 0
          #  identitySource: method.request.header.Authorization
          #  managedExternally: true
          private: true
      #    cors:
      #      origin: '*'
      #      headers:
      #        - Content-Type
      #        - If-Match
      #        - X-Amz-Date
      #        - Authorization
      #        - X-Api-Key
      #        - X-Amz-Security-Token
      #        - X-Amz-User-Agent
      #      allowCredentials: false
      #- http:
      #    path: /swagger/{proxy+}
      #    method: GET
      #    private: false
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
# TODO: Enable this line and set the correct policy name if DynamoDb is in use
#          - arn:aws:iam::${self:provider.account}:policy/base-api/lambda-dynamodb-base-api
        Policies:
          - PolicyName: dynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGet*"
                    - "dynamodb:BatchWrite"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/Notifications'
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  vpc:
    development:
      securityGroupIds:
        - sg-0a457bf4e6eda31de
      subnetIds:
        - subnet-000b89c249f12a8ad
        - subnet-0deabb5d8fb9c3446
    staging:
      securityGroupIds:
        - sg-04c73000bf97eae7e
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      securityGroupIds:
        - sg-060458cddaaa2742a
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
